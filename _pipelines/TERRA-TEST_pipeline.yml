# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#trigger:
#- main

stages:
- stage: LAB_Plan
  jobs:
  - job: Terraform_Plan
    workspace: 
      clean: all
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Bash@3
      name: PLAN
      displayName: Bash - Terraform Plan
      inputs:
        targetType: 'inline'
        script: |
          
          export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
          export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
          export ARM_TENANT_ID=$(ARM_TENANT_ID)
          cd LAB
          
          terraform init -reconfigure
          terraform init -upgrade -migrate-state -force-copy
          terraform workspace select LAB || terraform workspace new LAB
          terraform workspace list
          terraform plan -var environment="LAB" -var client_id="$(ARM_CLIENT_ID)" -var client_secret="$(ARM_CLIENT_SECRET)" -var tenant_id="$(ARM_TENANT_ID)" -detailed-exitcode -refresh=false    
          if [ $? -eq 2 ]; then
            echo "Terraform changed"
            echo '##vso[task.setvariable variable=Changed;isOutput=true]true'
          else
            echo "Terraform no change"
            echo '##vso[task.setvariable variable=Changed;isOutput=true]false'
          fi
          
- stage: LAB_Apply
  condition: succeeded('LAB_Plan')
  jobs:

  - job: ApproveApply
    timeoutInMinutes: 10
    pool: server
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 5
      inputs:
        notifyUsers: | 
         sith.luangaphay@excellus.com
         sluangap@excellus.com
        instructions: 'approval of terraform apply'

  - job: Terraform_Apply
    dependsOn: ApproveApply
    timeoutInMinutes: 5
    condition: and(eq(stageDependencies.LAB_Plan.Terraform_Plan.outputs['PLAN.Changed'], true), eq(dependencies.ApproveApply.result,'Succeeded'))
    
    workspace: 
      clean: all
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Bash@3
      displayName: Bash - Terraform Apply
      inputs:
        targetType: 'inline'
        script: |
          echo $(TerraformApplySuccess)
          
          export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
          export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
          export ARM_TENANT_ID=$(ARM_TENANT_ID)
          cd LAB
          
          terraform init 
          terraform workspace select LAB
          terraform workspace list
          terraform apply -var environment="LAB" -var client_id="$(ARM_CLIENT_ID)" -var client_secret="$(ARM_CLIENT_SECRET)" -var tenant_id="$(ARM_TENANT_ID)" -auto-approve  -refresh=false
          




